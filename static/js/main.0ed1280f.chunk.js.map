{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","wb","XLSX","utils","book_new","Props","Title","Subject","Author","SheetNames","push","ws","json_to_sheet","skipHeader","wbout","write","bookType","type","convertToXlsx","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","Sheets","className","onClick","saveAs","Blob","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,kC,0KC+C5BC,MA1Cf,WAKI,IAAIC,EAAKC,IAAKC,MAAMC,WACpBH,EAAGI,MAAM,CACPC,MAAM,OACNC,QAAQ,IACRC,OAAO,KAETP,EAAGQ,WAAWC,KAAK,cACnB,IAMIC,EAAKT,IAAKC,MAAMS,cAJN,CACZ,CAAC,GAAK,QAAQ,SAAW,qBAAqB,QAAS,EAAM,YAAc,qCAA+B,QAAU,CAAC,GAAK,OAAO,KAAO,uCAAuC,KAAO,qBAAqB,OAAS,4BAA4B,MAAQ,kBAAkB,SAAW,IAAI,MAAQ,aAGvP,CAACC,YAAY,IACrDC,EAAQZ,IAAKa,MAAMd,EAAI,CAACe,SAAS,OAAQC,KAAK,UAOtD,SAASC,EAAcC,GAInB,IAFA,IAAIC,EAAM,IAAIC,YAAYF,EAAEG,QACxBC,EAAO,IAAIC,WAAWJ,GACjBK,EAAE,EAAGA,EAAEN,EAAEG,OAAQG,IAAKF,EAAKE,GAAuB,IAAlBN,EAAEO,WAAWD,GACtD,OAAOL,EAGT,OAdEnB,EAAG0B,OAAO,cAAgBhB,EACzBG,EAAQZ,IAAKa,MAAMd,EAAI,CAACe,SAAS,OAASC,KAAM,WAcjD,yBAAKW,UAAU,OAAf,gBAEM,4BAAQC,QAAS,kBAAIC,iBAAO,IAAIC,KAAK,CAACb,EAAcJ,IAAQ,CAACG,KAAK,6BAA8B,eAAhG,cC9BUe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ed1280f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport XLSX from 'xlsx' \nimport { saveAs } from 'file-saver';\nfunction App() {\n\n\n\n\n    let wb = XLSX.utils.book_new();\n    wb.Props={\n      Title:'Demo',\n      Subject:'s',\n      Author:'a'\n    }\n    wb.SheetNames.push(\"Test Sheet\");\n    let ws_data = ['Id','Date','Company','Company ID','',[\"3962\",\"30.08.2016\",],['a','b']]\n    // Id,Date,Company,Company ID,User,User ID,User UUID,Email,Invoice Due Date,Balance Due,Currency,Is Refund,Total,Status \n    let ws_data1 =[\n      {\"id\":\"46470\",\"costType\":\"RECURRING_PER_UNIT\",\"credit\":false,\"description\":\"Per User Fee ( Monthly Fee )\",\"edition\":{\"id\":\"6711\",\"uuid\":\"2e634277-6b59-4ab9-b805-8d77d18daab0\",\"name\":\"Recurring Edition\"},\"period\":\"May 3, 2019 - Jun 3, 2019\",\"price\":\"EUR10.24 / User\",\"quantity\":\"1\",\"total\":\"EUR10.24\"}\n    ]\n    // let ws = XLSX.utils.aoa_to_sheet(ws_data, {skipHeader: 1});\n    let ws = XLSX.utils.json_to_sheet(ws_data1, {skipHeader: false});\n    let wbout = XLSX.write(wb, {bookType:'xlsx', type:'array'});\n    wb.Sheets[\"Test Sheet\"] = ws;\n     wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});\n\n\n\n\nfunction convertToXlsx(s) {\n \n    let buf = new ArrayBuffer(s.length); //convert s to arrayBuffer\n    let view = new Uint8Array(buf);  //create uint8array as viewer\n    for (let i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; //convert to octet\n    return buf;    \n}\n\n  return (\n    <div className=\"App\">\n     XLSX Download\n          <button onClick={()=>saveAs(new Blob([convertToXlsx(wbout)],{type:\"application/octet-stream\"}), 'test.xlsx')}>download</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}